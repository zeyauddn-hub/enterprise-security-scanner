version: '3.8'

services:
  # Main Enterprise Scanner Application
  enterprise-scanner:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "8090:8090"  # Prometheus metrics
    environment:
      - DATABASE_URL=postgresql://scanner:scanner123@postgres:5432/enterprise_scanner
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-enterprise-scanner-secret-key}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-auto-generated}
      - HTTPS_ONLY=false
      - LOG_LEVEL=INFO
      - MAX_THREADS=500
      - PROMETHEUS_PORT=8090
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - ./reports:/app/reports
    depends_on:
      - postgres
      - redis
      - prometheus
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=enterprise_scanner
      - POSTGRES_USER=scanner
      - POSTGRES_PASSWORD=scanner123
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scanner -d enterprise_scanner"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass redis123
    environment:
      - REDIS_PASSWORD=redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - enterprise-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - enterprise-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Elasticsearch for Log Management
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - enterprise-network
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - enterprise-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/html:/usr/share/nginx/html
    networks:
      - enterprise-network
    depends_on:
      - enterprise-scanner
      - grafana
    restart: unless-stopped

  # Vault for Secrets Management
  vault:
    image: vault:latest
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dev-token-123
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
    cap_add:
      - IPC_LOCK
    networks:
      - enterprise-network
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    environment:
      - PGPASSWORD=scanner123
    volumes:
      - ./backups:/backups
      - postgres_data:/source_data:ro
    command: >
      sh -c "
        while true; do
          pg_dump -h postgres -U scanner -d enterprise_scanner > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          tar -czf /backups/data_backup_$$(date +%Y%m%d_%H%M%S).tar.gz -C /source_data .
          find /backups -name '*.sql' -mtime +7 -delete
          find /backups -name '*.tar.gz' -mtime +7 -delete
          sleep 21600
        done
      "
    networks:
      - enterprise-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Security Scanner Worker (for distributed scanning)
  scanner-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://scanner:scanner123@postgres:5432/enterprise_scanner
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=scanner
      - MAX_THREADS=100
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - enterprise-network
    restart: unless-stopped
    deploy:
      replicas: 3

  # Report Generator Service
  report-generator:
    build:
      context: .
      dockerfile: Dockerfile.reports
    environment:
      - DATABASE_URL=postgresql://scanner:scanner123@postgres:5432/enterprise_scanner
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./reports:/app/reports
      - ./templates:/app/templates
    depends_on:
      - postgres
      - redis
    networks:
      - enterprise-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  vault_data:
    driver: local

networks:
  enterprise-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16